worker_processes  auto;
#error_log  logs/error.log;

events {
    worker_connections  1024;
}

# RTMP configuration
rtmp {
    server {
		listen 1935; # Listen on standard RTMP port
		chunk_size 2000; 
		# ping 30s;
		# notify_method get;

		# This application is to accept incoming stream
		application live {
			live on; # Allows live input

 			# record first 1K of stream
            record all;
            record_path /mnt/flvs;
            #record_max_size 1K;

            # append current timestamp to each flv
            # record_unique on;
			allow publish all;
			#allow play all;

			exec_record_done ffmpeg -i /mnt/flvs/ -f mp4 /mnt/mp4s/$basename.mp4;

			push rtmp://localhost:1935/big;

			# for each received stream, transcode for adaptive streaming
			# This single ffmpeg command takes the input and transforms
			# the source into 4 different streams with different bitrates
			# and qualities. # these settings respect the aspect ratio.
			# exec_push  /usr/local/bin/ffmpeg -i rtmp://localhost:1935/$app/$name 
			# 			-async 1
			# 			-vsync -1
			# 			-c:v libx264 -c:a aac -b:v 256k  -b:a 64k  -vf "scale=480:trunc(ow/a/2)*2"  -tune zerolatency -preset superfast -crf 23 -f flv rtmp://localhost:1935/show/$name_low
			# 			-c:v libx264 -c:a aac -b:v 768k  -b:a 128k -vf "scale=720:trunc(ow/a/2)*2"  -tune zerolatency -preset superfast -crf 23 -f flv rtmp://localhost:1935/show/$name_mid
			# 			-c:v libx264 -c:a aac -b:v 1024k -b:a 128k -vf "scale=960:trunc(ow/a/2)*2"  -tune zerolatency -preset superfast -crf 23 -f flv rtmp://localhost:1935/show/$name_high
			# 			-c:v libx264 -c:a aac -b:v 1920k -b:a 128k -vf "scale=1280:trunc(ow/a/2)*2" -tune zerolatency -preset superfast -crf 23 -f flv rtmp://localhost:1935/show/$name_hd720
			# 			-c copy -f flv rtmp://localhost:1935/show/$name_src;
		}
 		
		 application vod {
            play /mnt/mp4s;
        }

		      # Transcoding (ffmpeg needed)
        application big {
            live on;

            # On every pusblished stream run this command (ffmpeg)
            # with substitutions: $app/${app}, $name/${name} for application & stream name.
            #
            # This ffmpeg call receives stream from this application &
            # reduces the resolution down to 32x32. The stream is the published to
            # 'small' application (see below) under the same name.
            #
            # ffmpeg can do anything with the stream like video/audio
            # transcoding, resizing, altering container/codec params etc
            #
            # Multiple exec lines can be specified.

            exec ffmpeg -re -i rtmp://localhost:1935/$app/$name -vcodec flv -acodec copy -s 320x320
                        -f flv rtmp://localhost:1935/small/${name};
        }

        application small {
            live on;
            # Video with reduced resolution comes here from ffmpeg
        }

		# This is the HLS application
		# application show {
		# 	live on; # Allows live input from above application
		# 	#deny play all; # disable consuming the stream from nginx as rtmp
		# 	allow play all;

		# 	hls on; # Enable HTTP Live Streaming
		# 	hls_fragment 3;
		# 	# hls_playlist_length 20;
		# 	 hls_path /mnt/hls/;  # hls fragments path
		# 	# # Instruct clients to adjust resolution according to bandwidth
		# 	 hls_variant _src BANDWIDTH=4096000; # Source bitrate, source resolution
		# 	 hls_variant _hd720 BANDWIDTH=2048000; # High bitrate, HD 720p resolution
		# 	 hls_variant _high BANDWIDTH=1152000; # High bitrate, higher-than-SD resolution
		# 	 hls_variant _mid BANDWIDTH=448000; # Medium bitrate, SD resolution
		# 	 hls_variant _low BANDWIDTH=288000; # Low bitrate, sub-SD resolution
			
			# MPEG-DASH
            # dash on;
            # dash_path /mnt/dash/;  # dash fragments path
			# dash_fragment 3;
			# dash_playlist_length 20;			
		# }
	}
}


http {
	sendfile off;
	tcp_nopush on;
	directio 512;
	# aio on;
	
	# HTTP server required to serve the player and HLS fragments
	server {
		listen 8080;
		
		# Serve HLS fragments
		location /hls {
			types {
				application/vnd.apple.mpegurl m3u8;
				video/mp2t ts;
			}
			
			root /mnt;

            add_header Cache-Control no-cache; # Disable cache
			
			# CORS setup
			add_header 'Access-Control-Allow-Origin' '*' always;
			add_header 'Access-Control-Expose-Headers' 'Content-Length';
            
			# allow CORS preflight requests
			if ($request_method = 'OPTIONS') {
				add_header 'Access-Control-Allow-Origin' '*';
				add_header 'Access-Control-Max-Age' 1728000;
				add_header 'Content-Type' 'text/plain charset=UTF-8';
				add_header 'Content-Length' 0;
				return 204;
			}
		}
		
        # # Serve DASH fragments
        # location /dash {
        #     types {
        #         application/dash+xml mpd;
        #         video/mp4 mp4;
        #     }

		# 	root /mnt;
			
		# 	add_header Cache-Control no-cache; # Disable cache


        #     # CORS setup
        #     add_header 'Access-Control-Allow-Origin' '*' always;
        #     add_header 'Access-Control-Expose-Headers' 'Content-Length';

        #     # Allow CORS preflight requests
        #     if ($request_method = 'OPTIONS') {
        #         add_header 'Access-Control-Allow-Origin' '*';
        #         add_header 'Access-Control-Max-Age' 1728000;
        #         add_header 'Content-Type' 'text/plain charset=UTF-8';
        #         add_header 'Content-Length' 0;
        #         return 204;
        #     }
        # }		
		
		# This URL provides RTMP statistics in XML
		location /stat {
			rtmp_stat all;
			rtmp_stat_stylesheet stat.xsl; # Use stat.xsl stylesheet 
		}

		location /stat.xsl {
			# XML stylesheet to view RTMP stats.
			root /usr/local/nginx/html;
		}

	}
}